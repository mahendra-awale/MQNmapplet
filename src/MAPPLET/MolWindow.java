package MAPPLET;

import chemaxon.formats.MolImporter;
import chemaxon.marvin.beans.MViewPane;
import chemaxon.marvin.io.ArrayMDocSource;
import chemaxon.marvin.view.swing.TableOptions;
import chemaxon.marvin.view.swing.TableSupport;
import chemaxon.struc.Molecule;
import chemaxon.util.MolHandler;
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.GZIPInputStream;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.*;

/**
 *
 * This class loads a file from bins/database/X/Y.GZ and displays its molecules
 * in a molecule matrix.
 *
 * Most of the code is self explanatory and easy to understand, so ENJOY!
 *
 * Created on 19-Sep-2011, 13:57:02
 *
 * @author Mahendra
 */
public final class MolWindow extends javax.swing.JFrame {

    /*
     * Creates MainWidnow
     */
    public MolWindow() throws InterruptedException {

        initComponents();
        setOptions();
        initMyComponents();

        if (smw != null) {
            smw.setVisible(false);
        }

        if (smw == null) {
            smw = new selectMolWarning();
            smw.setUndecorated(true);
            smw.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
        }
    }

    /**
     * ***************************************************************************************
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mvpane = new MViewPane();
        lookInDatabse = new JButton();
        doMqnSearch = new JButton();
        largeMolWarningLabel = new JLabel();
        downloadBin = new JButton();
        menubar = new JMenuBar();
        menu = new JMenu();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        mvpane.setBorderWidth(1);
        mvpane.setPopupMenusEnabled(false);

        lookInDatabse.setText("Look In Pubchem or Chembl");
        lookInDatabse.addActionListener(formListener);

        doMqnSearch.setText("MQN Search");
        doMqnSearch.setOpaque(true);
        doMqnSearch.addActionListener(formListener);

        largeMolWarningLabel.setBackground(new Color(226, 219, 245));
        largeMolWarningLabel.setFont(new Font("Liberation Serif", 1, 14)); // NOI18N
        largeMolWarningLabel.setForeground(new Color(15, 15, 210));
        largeMolWarningLabel.setText("Molecules too large to display! Select the cell and look in database.");
        largeMolWarningLabel.setOpaque(true);

        downloadBin.setText("Save Bin");
        downloadBin.addActionListener(formListener);

        menu.setText("Display Options");
        menubar.add(menu);

        setJMenuBar(menubar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(mvpane, GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(doMqnSearch)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(lookInDatabse)
                        .addGap(18, 18, 18)
                        .addComponent(downloadBin))
                    .addComponent(largeMolWarningLabel, GroupLayout.PREFERRED_SIZE, 427, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mvpane, GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(doMqnSearch)
                    .addComponent(lookInDatabse)
                    .addComponent(downloadBin))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(largeMolWarningLabel)
                .addGap(13, 13, 13))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements ActionListener {
        FormListener() {}
        public void actionPerformed(ActionEvent evt) {
            if (evt.getSource() == lookInDatabse) {
                MolWindow.this.lookInDatabseActionPerformed(evt);
            }
            else if (evt.getSource() == doMqnSearch) {
                MolWindow.this.doMqnSearchActionPerformed(evt);
            }
            else if (evt.getSource() == downloadBin) {
                MolWindow.this.downloadBinActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void lookInDatabseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_lookInDatabseActionPerformed

        if (mvpane.getSelectedIndex() < 0) {
            smw.setVisible(true);
        } else {


            Molecule m = mvpane.getM(mvpane.getSelectedIndex());
            String sarry[] = m.getName().split(" ");
            String name = sarry[sarry.length - 2];
            connectToInternet cti = new connectToInternet(dataBaseLookUp_url + name);

        }
    }//GEN-LAST:event_lookInDatabseActionPerformed

    /*
     * Connects To MQN Browser website with molecule pasted inside browser
     */
    private void doMqnSearchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_doMqnSearchActionPerformed
        // TODO add your handling code here:

        if (mvpane.getSelectedIndex() < 0) {
            smw.setVisible(true);
        } else {
            Molecule m = mvpane.getM(mvpane.getSelectedIndex());
            String smi = m.toFormat("smiles:q");
            connectToInternet cti = new connectToInternet(mqnSearch_url + smi);
        }
    }//GEN-LAST:event_doMqnSearchActionPerformed

    /*
     * DownLoad the content of bin
     */
    private void downloadBinActionPerformed(ActionEvent evt) {//GEN-FIRST:event_downloadBinActionPerformed

        if (evt.getActionCommand().equals("Save Bin")) {
            try {
                String defaultNameForFileToSave = file.split("/")[4] + "-" + file.split("/")[5] + ".gz";
                fileSaveBox(file, defaultNameForFileToSave);
            } catch (IOException ex) {
                Logger.getLogger(imageHandler.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_downloadBinActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton doMqnSearch;
    private JButton downloadBin;
    private JLabel largeMolWarningLabel;
    private JButton lookInDatabse;
    private JMenu menu;
    private JMenuBar menubar;
    private MViewPane mvpane;
    // End of variables declaration//GEN-END:variables
    TableSupport tableSupport;
    TableOptions tableOption;
    static selectMolWarning smw;

    /**
     * ***************************************************************************************
     */
    private void initMyComponents() {

        //TableSupport object is needed to load molecules in a matrix (in setMolsFile())
        tableSupport = mvpane.getTableSupport();

        /*
         * limit the number of molecules display to 500
         */
        tableOption = tableSupport.getTableOptions();
        tableOption.setMaxSize(1000);

        //MoleculeMatrix options can be set by modyfing the tableoptions from the tablesupport
        //from mViewPane.!
        TableOptions tblopts = tableSupport.getTableOptions();
        tblopts.setViewHandlerType(TableOptions.VH_GRIDBAG);
        tblopts.setMaxRows(4);
        tblopts.setMaxCols(4);
        tblopts.setMolNameShown(true);

        //add functionality to "display options" by using chemaxon magic
        tableSupport.makeTableMenu(menu);
        mvpane.getContentPane().setBackground(Color.LIGHT_GRAY);
        mvpane.setPopupMenusEnabled(true);
    }
    /**
     * ***************************************************************************************
     */
    /*
     * Select the molecules to display in MolWindow: When Number of molecules
     * more than 1000: Do not select the top 1000 molecules for display rather
     * sample the molecules from entire file
     */
    String file = "";

    public void setMolsFile(String file) throws Exception {

        this.remove(this.largeMolWarningLabel);
        String fileName = "http://130.92.134.166:8080/MAPPLET/runMAPPLET.v8/" + file;
        this.file = file;
        MolImporter mi = new MolImporter(fileName);
        Molecule mol;
        ArrayList<Molecule> mols = new ArrayList<Molecule>();

        while ((mol = mi.read()) != null) {
            mols.add(mol);
        }
        mi.close();

        if (mols.size() > 1000) {
            double counter = 0;
            double step = mols.size() / (double) 1000;
            ArrayList<Molecule> molsToDisplay = new ArrayList<Molecule>();
            for (int i = 0; i < 1000; i++) {
                molsToDisplay.add(mols.get((int) counter));
                counter = counter + step;

            }
            mols.clear();
            ArrayMDocSource arrMD = new ArrayMDocSource(molsToDisplay);
            tableSupport.start(arrMD, fileName);
            appletMain.displayInfoOnBinView.displayMsgWindow();

        } else {

            ArrayMDocSource arrMD = new ArrayMDocSource(mols);
            tableSupport.start(arrMD, fileName);
        }
    }
    /**
     * ***************************************************************************************
     */
    /*
     * set the aprropriate buttons/options as per database
     */
    String dataBaseLookUp_url = "";
    String mqnSearch_url = "";

    String setOptions() {


        if (appletMain.dbName.startsWith("Pubchem")) {
            this.lookInDatabse.setText("Look In Pubchem");
            this.lookInDatabse.setSelected(false);
            this.lookInDatabse.setToolTipText("Look Selected Molecule in Pubchem Database");
            this.doMqnSearch.setToolTipText("Do MQN search for Selected Molecule in Pubchem Database");
            this.doMqnSearch.setText("MQN search In Pubchem");
            this.doMqnSearch.setSelected(false);
            dataBaseLookUp_url = "http://pubchem.ncbi.nlm.nih.gov/summary/summary.cgi?cid=";
            mqnSearch_url = "http://130.92.134.166:8080/pcbrowser2/index.html?";
            return null;
        }

        if (appletMain.dbName.contains("ZINC")) {
            this.lookInDatabse.setText("Look In ZINC");
            this.lookInDatabse.setSelected(false);
            this.lookInDatabse.setToolTipText("Look Selected Molecule in ZINC Database");
            this.doMqnSearch.setText("MQN search In ZINC");
            this.doMqnSearch.setSelected(false);
            this.doMqnSearch.setToolTipText("Do MQN search for Selected Molecule in ZINC Database");
            dataBaseLookUp_url = "http://zinc.docking.org/substance/";
            mqnSearch_url = "http://130.92.134.166:8080/ZINC_UCSF/index.html?";
            return null;
        }

        if (appletMain.dbName.startsWith("GDB-13")) {
            this.doMqnSearch.setText("MQN search In GDB-13");
            this.doMqnSearch.setToolTipText("Do MQN search for Selected Molecule in GDB-13 Database");
            this.doMqnSearch.setSelected(false);
            mqnSearch_url = "http://130.92.134.166:8080/gdbbrowser/index.html?";
            this.remove(lookInDatabse);
            return null;
        }
        return null;
    }

    /*
     * If In case Molecules are large to display used this method
     */
    void handlerForLargeMolecules(String fileName) throws MalformedURLException, IOException {

        this.file = fileName;
        URL url = new URL("http://130.92.134.166:8080/MAPPLET/runMAPPLET.v8/" + fileName);
        URLConnection servletConnection = url.openConnection();
        servletConnection.setDoInput(true); // true, if we get data back;
        BufferedReader in = new BufferedReader(new InputStreamReader(new GZIPInputStream(servletConnection.getInputStream())));
        String str = "";
        ArrayList<Molecule> mols = new ArrayList<Molecule>();

        if (appletMain.dbName.equals("DrugBank")) {
            while ((str = in.readLine()) != null) {

                String tmp[] = str.split(" ");
                Molecule tmpmol = new MolHandler("").getMolecule();
                tmpmol.setName(" " + tmp[1] + " " + tmp[2] + " " + tmp[3]);
                mols.add(tmpmol);
            }

            ArrayMDocSource arrMD = new ArrayMDocSource(mols);
            tableSupport.start(arrMD, fileName);
        }

        if (appletMain.dbName.contains("Pubchem") || appletMain.dbName.contains("ChEMBL.50") || appletMain.dbName.contains("Categories")) {
            while ((str = in.readLine()) != null) {

                String tmp[] = str.split(" ");
                Molecule tmpmol = new MolHandler("").getMolecule();
                tmpmol.setName(tmp[1] + " " + tmp[2]);
                mols.add(tmpmol);
            }

            ArrayMDocSource arrMD = new ArrayMDocSource(mols);
            tableSupport.start(arrMD, fileName);
        }
        if (appletMain.dbName.contains("GDB")) {
            while ((str = in.readLine()) != null) {

                String tmp[] = str.split(" ");
                Molecule tmpmol = new MolHandler("").getMolecule();
                tmpmol.setName(tmp[1]);
                mols.add(tmpmol);
            }

            ArrayMDocSource arrMD = new ArrayMDocSource(mols);
            tableSupport.start(arrMD, fileName);
        }
    }

    /**
     * ***************************************************************************************
     */
    /*
     * this CLASS will store the bin file from host machine to specified file in
     * user computer
     */
    class saveBinMols extends SwingWorker {

        String binFileFromHost;
        String saveToFile;

        saveBinMols(String binFileFromHost, String saveToFile) {
            this.binFileFromHost = binFileFromHost;
            this.saveToFile = saveToFile;
        }

        @Override
        protected Object doInBackground() throws Exception {
            getBinFileFromServer gbfs = new getBinFileFromServer();
            gbfs.saveBinFile(binFileFromHost, saveToFile);
            return null;
        }
    }

    void fileSaveBox(String binFileFromHost, String defaultFileNameTosave) throws IOException {

        JFrame j1 = new JFrame();
        j1.setSize(300, 300);

        FileDialog fd = new FileDialog(j1, "Save File", FileDialog.SAVE);
        fd.setFile(defaultFileNameTosave);
        fd.setVisible(true);

        String fileName = fd.getFile();
        String dirName = fd.getDirectory();

        String saveToFile = dirName + fileName;
        saveBinMols saveBinMols = new saveBinMols(binFileFromHost, saveToFile);
        saveBinMols.execute();
    }

    /**
     * ***************************************************************************************
     */
    /*
     * This is warning to display if USER press Button without selecting any
     * molecule:
     */
    class selectMolWarning extends JFrame {

        selectMolWarning() throws InterruptedException {

            this.setSize(300, 100);
            this.setLocationRelativeTo(this);
            this.setResizable(false);
            JLabel wrng = new JLabel("Please select molecule first!");
            wrng.setHorizontalAlignment(SwingConstants.CENTER);
            this.getContentPane().add(wrng);
            this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        }
    }
}
