    /*
 * Created on Oct 20, 2011, 11:04:54 PM
 */
package MAPPLET;

import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import locateYourMol.dialogMsg;
import locateYourMol.drawMolandSubmit;
import locateYourMol.mapListOfMolecules;

/**
 *
 *******************************************************************************
 * MAIN APPLET WINDOW: IMPORTANT CLASS:
 * ******************************************************************************
 *
 * This is Main APPLET window: all the APPLET GUI components defined in this
 * class!
 *
 * I will try to give you most of the details but chances are high that i may
 * missed some of the points.!
 *
 * MAIN APPLET WINDOW GUI COMPONENETS ARE:
 *
 * 1: JScrollPane
 *
 * 2: Four JButtons (Zoom In, Zoom Out, Locate MOl and Reset)
 *
 * 3: panelForImage: This is JPanel on to which we will put another JPanel
 * (basically the imageHandler class object): all the image/map related activity
 * handle by imageHandler.!
 *
 * 4: JCOM box to show & allow user to choose database from list of databases.
 *
 * 5: JCOM box to show & allow user to choose map from list of maps (for given
 * database).
 *
 * 6: logWindow: displays the logs
 *
 * 7: mapTrace checkBox: clicking this box will open new panel with map trace.
 * May be you would like to have look in mapTrace class!
 *
 * 8: Two JLabels for displaying CHEMAXON and UNIBE Logo
 *
 * 9: Two buttons to display the "Marker image" and "erase marker" Image on It.
 * One button allows the user to select marker and place on map while other
 * allows to remove the markers from map respectively
 *
 ********************************************************************************
 *
 * Created on 12-Sep-2011, 17:44:21
 *
 * @author mahendra
 */
public class appletMain extends javax.swing.JApplet {

    /**
     * Initializing the APPLET
     */
    @Override
    public void init() {

        /*
         * splash screen to display: that we are loading
         */
        pgb.setLocationRelativeTo(this);

        initComponents();
        initMyComponents();

        /*
         * special renderer for JCOM Box to display ToolTip
         */
        cbDB.setRenderer(new MyComboBoxRendererForDatabase());
        cbMap.setRenderer(new MyComboBoxRendererForMaps());

        /*
         * panel for displaying map image
         */
        panelForImage.setBackground(Color.BLACK);
        log = new logWindow();
        scrPane.setWheelScrollingEnabled(false);

        /*
         * add chemaxon logo
         */
        addlogosAndMapMapMarkers();

        /*
         * set the toolTip for some componenet
         */
        setToolTip();
        try {
            displayInfoOnBinView = new displayInfoOnBinView();
        } catch (InterruptedException ex) {
            Logger.getLogger(appletMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        msgForLockingAndBinMarking = new msgForLockingAndBinMarking();
    }

    /**
     * ***************************************************************************************
     */
    /**
     * This method is called from within the init() method to initialize the
     * form.
     *
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        scrPane = new javax.swing.JScrollPane();
        panelForImage = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        mViewPane = new chemaxon.marvin.beans.MViewPane();
        cbDB = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbMap = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        displayAverage = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        displayStdev = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        coOrdinateDisplay = new javax.swing.JTextField();
        densityDisplay = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        checkBoxForLog = new javax.swing.JCheckBox();
        labelForChemAxonLogo = new javax.swing.JLabel();
        labelForUnibeLogo = new javax.swing.JLabel();
        checkBoxmapTrace = new javax.swing.JCheckBox();
        MapMarker = new javax.swing.JButton();
        removeMapMarkers = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        jButton4.setText("jButton3");

        scrPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrPane.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        scrPane.setDoubleBuffered(true);
        scrPane.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                scrPaneMouseWheelMoved(evt);
            }
        });
        scrPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scrPaneMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                scrPaneMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scrPaneMouseReleased(evt);
            }
        });
        scrPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                scrPaneMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                scrPaneMouseMoved(evt);
            }
        });

        panelForImage.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        panelForImage.setFocusable(false);
        panelForImage.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                panelForImageMouseWheelMoved(evt);
            }
        });
        panelForImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelForImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelForImageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelForImageMouseReleased(evt);
            }
        });
        panelForImage.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelForImageMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout panelForImageLayout = new javax.swing.GroupLayout(panelForImage);
        panelForImage.setLayout(panelForImageLayout);
        panelForImageLayout.setHorizontalGroup(
            panelForImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 745, Short.MAX_VALUE)
        );
        panelForImageLayout.setVerticalGroup(
            panelForImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 664, Short.MAX_VALUE)
        );

        scrPane.setViewportView(panelForImage);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(250, 550));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Average Molecule"));
        jPanel3.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel3.setLayout(new java.awt.BorderLayout());

        mViewPane.setPopupMenusEnabled(false);
        mViewPane.setSelectable(false);
        mViewPane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mViewPaneActionPerformed(evt);
            }
        });
        jPanel3.add(mViewPane, java.awt.BorderLayout.CENTER);

        cbDB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDBItemStateChanged(evt);
            }
        });

        jLabel1.setText("DB:");

        jLabel2.setText("Map:");

        cbMap.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbMapItemStateChanged(evt);
            }
        });
        cbMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMapActionPerformed(evt);
            }
        });

        jLabel4.setText("Density (mols):");
        jLabel4.setToolTipText("Molecules per Pixel");

        jLabel5.setText("Average:");

        displayAverage.setEditable(false);
        displayAverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAverageActionPerformed(evt);
            }
        });

        jLabel6.setText("Deviation:");

        displayStdev.setEditable(false);
        displayStdev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayStdevActionPerformed(evt);
            }
        });

        jLabel7.setText("Coordinates:");

        coOrdinateDisplay.setEditable(false);
        coOrdinateDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coOrdinateDisplayActionPerformed(evt);
            }
        });

        densityDisplay.setEditable(false);
        densityDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                densityDisplayActionPerformed(evt);
            }
        });

        jButton2.setText("LocateMol");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(" zoom + ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText(" zoom -");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Reset");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        checkBoxForLog.setText("View Log");
        checkBoxForLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxForLogActionPerformed(evt);
            }
        });

        checkBoxmapTrace.setText("Map Trace");
        checkBoxmapTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxmapTraceActionPerformed(evt);
            }
        });

        MapMarker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapMarkerActionPerformed(evt);
            }
        });

        removeMapMarkers.setName("removeMapMarkers"); // NOI18N
        removeMapMarkers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMapMarkersActionPerformed(evt);
            }
        });

        jButton8.setText("Map List of Mols");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(MapMarker, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeMapMarkers, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(labelForUnibeLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelForChemAxonLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbDB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel5)
                                        .addComponent(checkBoxForLog))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(checkBoxmapTrace)
                                        .addComponent(displayStdev)
                                        .addComponent(displayAverage)
                                        .addComponent(cbMap, 0, 147, Short.MAX_VALUE)))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(densityDisplay)
                                        .addComponent(coOrdinateDisplay)
                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbDB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(coOrdinateDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(densityDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(cbMap, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(displayAverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(displayStdev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxForLog)
                    .addComponent(checkBoxmapTrace))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelForUnibeLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelForChemAxonLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeMapMarkers, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MapMarker, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrPane, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                    .addComponent(scrPane))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Database combox selection event: Database combox is display in mapplet
     * which contain list of databses: user can select the one of the database
     * from combobox.
     *
     * By defualt the 1st database in comBox is selected.Once the database is
     * selected you need to do following things
     *
     * load the list of maps for given database: density file Average mols file
     * *.as.gz(avg and std deviation) file for selected map
     *
     * average mols and density are same for all the maps for given database:so
     * you will load them once only for selected database.
     *
     * List of avaliable maps for this database will be added to another
     * combox(for map) which display the list of avalaible maps.
     *
     * we will load by default the ring map and *.as.gz file related to it: This
     * part will be done in differernt method..
     *
     * Note that, we have different standard deviation & average file (*.as.gz)
     * for each of the map for given database.
     *
     * This method initially called from initMyComponenet method:
     *
     * because there we are adding the avalaible "database names" to this
     * com-box, when you add the names to combox, by default the 1st name in
     * comb box get selected.
     *
     * Selection in com box triggers cbDBItemStateChanged (this method) : and
     * inside this method we are setting combox for map which will latter invoke
     * cbMAPItemStateChanged method.....!
     *
     * IMPT: Make sure that you do not do any GUI related work (like updating)
     * in background You will be in trouble(Keep it to minimum):
     */
    /**
     * ***************************************************************************************
     */
    private void cbDBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDBItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            return;
        }

        /*
         * do not allow the user to do anything during loading
         */
        setEnabled(false);

        /*
         * heavy (GUI-freezing) work do it inside a swingworker: But keep in
         * mind not to do to much GUI updating work in background
         */
        new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                try {

                    /*
                     * Donot allow user to do anythging when loading data:-)
                     */
                    toggleDuringWork(false);

                    /*
                     * get the name of selected database
                     */
                    dbName = (String) cbDB.getSelectedItem();

                    /*
                     * get the size of image
                     */
                    mapSize = dbh.getMapSize(dbName);

                    /*
                     * reset view position of map
                     */
                    scrVP.setViewPosition(new Point(0, 0));

                    /*
                     * create image handler object for this database
                     */
                    imgHandl = new imageHandler(mapSize.x, mapSize.y, scrVP, panelForImage);

                    /*
                     * load the density and average molecules for this database
                     */
                    dens = dbh.getDensities(dbName, mapSize);

                    avgmols = dbh.getAvgMols(dbName, mapSize);

                    /*
                     * loads the average mol info file
                     */
                    avgmolInfo = dbh.getAvgMolInfo(dbName, mapSize);

                    /*
                     * check if the locate molWindow object is alread open or
                     * not if it is open then closed it and create new one: also
                     * make it unvisible:
                     *
                     */
                    if (locateMolWindow == null) {
                        locateMolWindow = new drawMolandSubmit(am, imgHandl);
                    } else {

                        /*
                         * closed the window:::B/C for every database we need to
                         * create the new object for locateMolWindow::sharing
                         * the locateMolWindow among all database will put you
                         * in trouble ::so closed it
                         */
                        locateMolWindow.setVisible(false);
                        locateMolWindow = new drawMolandSubmit(am, imgHandl);
                    }

                    cbMap.removeAllItems();
                    for (String map : dbh.mapsOfDB(dbName)) {

                        /*
                         * upating combox for map:it will invoke the
                         * cbMAPItemStateChanged method
                         */
                        cbMap.addItem(map);
                    }
                    /**
                     * *** END ****
                     */
                } catch (Exception e) {

                    /*
                     * Error handling. Subfunctions throw errors in case of
                     * problems, add msg to log
                     */
                    logWindow.updateLog(e.getMessage());

                    /*
                     * reenable GUI if above fails
                     */
                    toggleDuringWork(true);
                    pgb.setVisible(false);
                    setEnabled(true);
                }
                return null;
            }

            @Override
            public void done() {
                /*
                 * update log
                 */
                logWindow.updateLog("Loading dbName \"" + dbName + "\"" + " completed \n");
            }
        }.execute();
    }//GEN-LAST:event_cbDBItemStateChanged

    /**
     * ***************************************************************************************
     */
    /**
     * Database MAP selection COMBOX event: The map COMBOX contains the list of
     * maps for given database and user then can select the one of the map.
     *
     * When user select the map, you need to load the CORROSPONDING as.gz
     * (average & standard deviation) file and PNG PNG image for that map!!by
     * default ring map is selected
     */
    private void cbMapItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbMapItemStateChanged

        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            return;
        }

        /*
         * set splash screen: display MSG to USER: Wait
         */

        if (!pgb.isVisible()) {
            pgb.setVisible(true);
        }
        new SwingWorker() { //heavy (GUI-freezing) work do it inside a swingworker
            @Override
            protected Object doInBackground() throws Exception {
                try {

                    /*
                     * do not allow to do anything else during map loading
                     */
                    toggleDuringWork(false);

                    /*
                     * get the selected database name
                     */
                    dbName = (String) cbDB.getSelectedItem();

                    /*
                     * get the name of selected map
                     */
                    mapName = (String) cbMap.getSelectedItem();

                    /*
                     * spcial handling for Category Map
                     */


                    /*
                     * first clear avg and stddev then get new ones
                     */
                    avg = new float[mapSize.x][mapSize.y];
                    stdev = new float[mapSize.x][mapSize.y];



                    /*
                     * get the avg and stdev files
                     */
                    float[][][] arr = dbh.getAvgStdevOfMap(dbName, mapName, mapSize);

                    /*
                     * filled in avg and stdev arrays
                     */
                    avg = arr[0];
                    stdev = arr[1];

                    /*
                     * load the map image and store image in img
                     */
                    buffImg = dbh.getMapAsImg(dbName, mapName);

                    /*
                     * bufferdd image convert to image
                     */
                    img = toImage(buffImg);

                    /*
                     * ask the image handler to set up the image properly
                     */
                    imgHandl.setImage(img);

                    /*
                     * allow to do anything now
                     */
                    toggleDuringWork(true);
                    /**
                     * *** END ****
                     */
                } catch (Exception e) {

                    /*
                     * In case something bad happened all databasehandler
                     * functions throw an Exception read it here and display it
                     */
                    logWindow.updateLog(e.getMessage());

                    /*
                     * undisplay splash SCREEN
                     */
                    pgb.setVisible(false);
                } finally {

                    //when done (with or w/o error) re-enable buttons
                    toggleDuringWork(true);
                    pgb.setVisible(false);
                    setEnabled(true);

                    /*
                     * set the map tracer: what is map tracer? Look map trace
                     * class
                     */
                    mt.setmapForTrace(img, mapSize.x, mapSize.y);
                    scrVP.addChangeListener(mt);
                    mt.updateRectangle();
                    mt.setAlwaysOnTop(true);

                }
                return null;
            }

            @Override
            public void done() {
                /*
                 * update log
                 */
                logWindow.updateLog("Loading map \"" + mapName + "\"" + " completed \n");
            }
        }.execute();
    }//GEN-LAST:event_cbMapItemStateChanged
    //////////////////////////////////////////////////////////////////////////////////////////
    private void scrPaneMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrPaneMouseMoved
}//GEN-LAST:event_scrPaneMouseMoved

    private void scrPaneMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrPaneMouseDragged
}//GEN-LAST:event_scrPaneMouseDragged

    private void scrPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrPaneMouseReleased
}//GEN-LAST:event_scrPaneMouseReleased

    private void scrPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrPaneMousePressed
}//GEN-LAST:event_scrPaneMousePressed

    private void scrPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrPaneMouseClicked
}//GEN-LAST:event_scrPaneMouseClicked

    private void scrPaneMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_scrPaneMouseWheelMoved
}//GEN-LAST:event_scrPaneMouseWheelMoved

    private void panelForImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelForImageMouseClicked
    }//GEN-LAST:event_panelForImageMouseClicked

    private void panelForImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelForImageMousePressed
    }//GEN-LAST:event_panelForImageMousePressed

    private void panelForImageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelForImageMouseReleased
    }//GEN-LAST:event_panelForImageMouseReleased

    private void panelForImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelForImageMouseDragged
    }//GEN-LAST:event_panelForImageMouseDragged

    private void panelForImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_panelForImageMouseWheelMoved
    }//GEN-LAST:event_panelForImageMouseWheelMoved

    /**
     * ***************************************************************************************
     */
    /*
     * this is zoom In button
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        /*
         * call the image handler & ask him to zoom Image properly
         */
        imgHandl.zoomIn();
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * ***************************************************************************************
     */
    /*
     * this is zoomOut button
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        /*
         * call the image handler & ask him to zoom out Image properly
         */
        imgHandl.zoomOut();
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * ***************************************************************************************
     */
    /*
     * this is locateMolButton
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        /*
         * called another class which display drawing window and ask user to
         * submit it as query for location of molecule on map
         */
        locateMolWindow.setSize(450, 470);
        locateMolWindow.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * ***************************************************************************************
     */
    /*
     * This is Reset Button
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed


        if (imageHandler.isLockOn) {
            return;
        }

        scrVP.setViewPosition(new Point(0, 0));
        try {

            logWindow.updateLog("Resetting the Map!..");
            /*
             * ask the image handler to set up the image properly
             */
            imageHandler.display_imageSizeX = imageHandler.minZoomtoKeep_X;
            imageHandler.display_imageSizeY = imageHandler.minZoomtoKeep_Y;
            imgHandl.setImage(img);

            /*
             * update log
             */
            logWindow.updateLog("done!\n");
        } catch (Exception ex) {
            Logger.getLogger(appletMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * ***************************************************************************************
     */
    /*
     * displays the log:when checkbox is selected
     */
    private void checkBoxForLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxForLogActionPerformed

        if (this.checkBoxForLog.isSelected()) {
            log.setVisible(true);
        } else {
            log.setVisible(false);
        }
    }//GEN-LAST:event_checkBoxForLogActionPerformed

    /**
     * ***************************************************************************************
     */
    /*
     * method to handle the checkBox event for mapTracer
     */
    private void checkBoxmapTraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxmapTraceActionPerformed

        if (this.checkBoxmapTrace.isSelected()) {
            mt.setVisible(true);
        } else {
            mt.setVisible(false);
        }
    }//GEN-LAST:event_checkBoxmapTraceActionPerformed

    private void cbMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbMapActionPerformed

    private void displayAverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAverageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayAverageActionPerformed

    private void displayStdevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayStdevActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayStdevActionPerformed

    private void densityDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_densityDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_densityDisplayActionPerformed

    private void coOrdinateDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coOrdinateDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coOrdinateDisplayActionPerformed

    private void mViewPaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mViewPaneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mViewPaneActionPerformed

    private void MapMarkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MapMarkerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MapMarkerActionPerformed

    private void removeMapMarkersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMapMarkersActionPerformed
    }//GEN-LAST:event_removeMapMarkersActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setSize(300, 200);
        fc.showOpenDialog(this);
        

        //get the name of file
        File file = null;
        try {
            file = fc.getSelectedFile();
        } catch (Exception e) {
            return;
        }

        if (file == null) {
            return;
        }

        ArrayList<String> mols = new ArrayList();
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String str;

            while ((str = br.readLine()) != null) {
                mols.add(str);
                if (mols.size() >= 1000) {
                    break;
                }
            }
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(appletMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(appletMain.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            mapListOfMolecules mp = new mapListOfMolecules(am, imgHandl, mols);
            mp.actionPerformed();
            dialogMsg dm=new dialogMsg();
        } catch (Exception e) {
            return;
        }        
    }//GEN-LAST:event_jButton8ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton MapMarker;
    private javax.swing.JComboBox cbDB;
    private javax.swing.JComboBox cbMap;
    private javax.swing.JCheckBox checkBoxForLog;
    private javax.swing.JCheckBox checkBoxmapTrace;
    public static javax.swing.JTextField coOrdinateDisplay;
    public static javax.swing.JTextField densityDisplay;
    public static javax.swing.JTextField displayAverage;
    public static javax.swing.JTextField displayStdev;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JPanel jPanel3;
    public javax.swing.JLabel labelForChemAxonLogo;
    public javax.swing.JLabel labelForUnibeLogo;
    public static chemaxon.marvin.beans.MViewPane mViewPane;
    public static javax.swing.JPanel panelForImage;
    public static javax.swing.JButton removeMapMarkers;
    public javax.swing.JScrollPane scrPane;
    // End of variables declaration//GEN-END:variables
    /**
     * ***************************************************************************************
     */
    /*
     * Initializes the self defined componenets
     */

    /*
     * JVIEWPORT this variable is very important when you are playing around the
     * images in scrollpane zoom in/out dragging and other stuff!!
     *
     * JVIEWPORT location & size defined which and how much part of your image
     * will be visible to user
     */
    public static JViewport scrVP;

    /*
     * To know what they actually means have a look on comment at the beginning
     * of class imageHandler: these variables defined as static B/C they belong
     * to entire class and we want to access them from other class imageHabdler
     */
    public static int xtoDisplay;
    public static int ytoDisplay;
    public static int xforMatrix;
    public static int yforMatrix;

    /*
     * database name selected presently
     */
    public static String dbName;

    /*
     * map name which is selected currently
     */
    public static String mapName;

    /*
     * map Size of selected map
     */
    public static Point mapSize;

    /*
     * this is buffered Image
     */
    public static BufferedImage buffImg;

    /*
     * this is image as Image object
     */
    public static Image img;

    /*
     * class to managed for image related activity: this object is created every
     * time you load new database
     */
    imageHandler imgHandl;

    /*
     * convenience class to outsorce databse names and corrosponding mapNames
     * for databse
     */
    dbaseHandler dbh = new dbaseHandler();

    /*
     * this is density values::which is unique for each database: while same for
     * the maps in database
     */
    public static int[][] dens;

    /*
     * this is average molecule::which is unique for each database: while same
     * for the maps in database
     */
    public static String[][] avgmols;

    /*
     * this is average molecule information::this data only used in case of
     * category map
     */
    public static String[][] avgmolInfo;

    /*
     * this is average and std deviation for selected map: it is different for
     * each map
     */
    public static float[][] avg, stdev;

    /*
     * this is object invoke after clicking on subMit button: it is unique for
     * each database:every time you changed database closed this
     * window::otherwise if you keep same window for all database you will be in
     * problem
     */
    drawMolandSubmit locateMolWindow;

    /*
     * logWindow class
     */
    logWindow log;

    /*
     * map tracer
     */
    mapTrace mt;
    /*
     * Progress Bar to display Wait MSG
     */
    static progressBarImage pgb;
    appletMain am = this;
    static displayInfoOnBinView displayInfoOnBinView;
    static msgForLockingAndBinMarking msgForLockingAndBinMarking;

    /*
     * this method is called only once(called in init method of applet) when
     * applet is satrted: this method update the combox for database: by list of
     * available database names
     */
    private void initMyComponents() {

        /*
         * set scrVP to be global shortcut for viewport. Must be defined AFTER
         * initComponents() (method of applet) otherwise NullPointerExcept!
         */
        scrVP = scrPane.getViewport();
        scrPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

        /*
         * create map tracet object
         */
        mt = new mapTrace();

        //Add available databases to dbName combobox
        try {
            for (String dbname : dbh.listDBs()) {
                cbDB.addItem(dbname);
            }
        } catch (Exception e) {
        }
    }

    /**
     * ***************************************************************************************
     */
    /**
     * Convenience function do enable/disable elements during swing worker is
     * running to prevent user plays around while stuff is loading!!
     */
    public void toggleDuringWork(boolean state) {

        cbDB.setEnabled(state);
        cbMap.setEnabled(state);
        scrPane.setEnabled(state);

        /*
         * this is locate mol button
         */
        jButton2.setEnabled(state);

        /*
         * this is zoom + button
         */
        jButton3.setEnabled(state);

        /*
         * this is zoom - button
         */
        jButton6.setEnabled(state);

        /*
         * this is reset button
         */
        jButton7.setEnabled(state);
    }

    /**
     * ***************************************************************************************
     */

    /*
     * method convert bufferedImage to image
     */
    public static Image toImage(BufferedImage bufferedImage) {
        return Toolkit.getDefaultToolkit().createImage(bufferedImage.getSource());
    }

    /**
     * ***************************************************************************************
     */
    /*
     * This is to display the toolTip for the combo-box of Database It means:
     * when user click on combo-box and move the mouse over the "name of
     * database in list" we will display the more information for corrosponding
     * database
     */
    class MyComboBoxRendererForDatabase extends BasicComboBoxRenderer {

        String[] tooltips = {"13~ M commercially-available compounds",
            "~ 24.5 Million molecules upto 60 Heavy Atom Count from Pubchem database",
            "~ 977 Million virtually possible molecules up to 13 atoms of CNOClS"
        };

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
                if (-1 < index) {
                    list.setToolTipText(tooltips[index]);
                }
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            setFont(list.getFont());
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }

    /**
     * ***************************************************************************************
     */

    /*
     * This is to display the toolTip for the combo-box of Maps It means: when
     * user click on combo-box and move the mouse over the "name of maps in
     * list" we will display the more information for corrosponding maps
     */
    class MyComboBoxRendererForMaps extends BasicComboBoxRenderer {

        String[] tooltips01 = {"color coded by Ring Count",
            "color coded by total Ring Atom Count",
            "color coded by Rotatable Bond Count ",
            "color coded by Carbon Atom Count",
            "color coded by Hydrogen Bond Acceptor Count",
            "color coded by Total Heavy Atom Count",
            "color coded by Occupancy"};
        
        String[] tooltips02 = {"color coded by fraction of \"Hydrogen Bond Acceptor Atoms\" in Molecules",
            "color coded by fraction of \"Carbon Atoms\" in Molecules",
            "color coded by fraction of \"Ring Atoms \" in Molecules",
            "color coded by \"Category\" of Molecules",
            "color coded by \"Total Heavy Atom Count\"",
            "color coded by \"Occupancy\""};

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());

                if (-1 < index) {
                    list.setToolTipText(tooltips01[index]);

                }
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            setFont(list.getFont());
            setText((value == null) ? "" : value.toString());
            return this;

        }
    }

    /**
     * ***************************************************************************************
     */
    /*
     * create the image icon for Chemaxon and Unibe logo and paint it on JLabel
     */
    void addlogosAndMapMapMarkers() {

        java.net.URL imageURL1 = getClass().getResource("/images/chemaxon.gif");
        if (imageURL1 != null) {
            ImageIcon icon = new ImageIcon(imageURL1);
            this.labelForChemAxonLogo.setIcon(icon);
        }

        imageURL1 = getClass().getResource("/images/unibe.jpg");
        if (imageURL1 != null) {
            ImageIcon icon = new ImageIcon(imageURL1);
            this.labelForUnibeLogo.setIcon(icon);
        }

        imageURL1 = getClass().getResource("/images/marker.png");

        if (imageURL1 != null) {

            ImageIcon icon = new ImageIcon(imageURL1);
            appletMain.MapMarker.setToolTipText("To Use Marker: Click Here");
            appletMain.MapMarker.setBorderPainted(false);
            appletMain.MapMarker.setIcon(icon);
            appletMain.MapMarker.setRolloverEnabled(true);
        }

        imageURL1 = getClass().getResource("/images/eraseMarker.png");
        if (imageURL1 != null) {

            ImageIcon icon = new ImageIcon(imageURL1);
            appletMain.removeMapMarkers.setToolTipText("To clear Markers: Click Here");
            appletMain.removeMapMarkers.setBorderPainted(false);
            appletMain.removeMapMarkers.setIcon(icon);
            appletMain.removeMapMarkers.setRolloverEnabled(true);
        }
    }

    /**
     * ***************************************************************************************
     */
    void setToolTip() {
        jButton3.setToolTipText("zoom Inside the MAP");
        jButton6.setToolTipText("zoom Outside the MAP");
        jButton7.setToolTipText("Reset the Map to Initial Size");
        jButton2.setToolTipText("Locate the Molecule on the Map");
        displayAverage.setToolTipText("Average Property at given Point");
        displayStdev.setToolTipText("Standard Deviation of Property at given Point");
        densityDisplay.setToolTipText("Number of Molecules Occupying the given Point");
        coOrdinateDisplay.setToolTipText("X-Y Coordinate for given Point on map");
    }
}
