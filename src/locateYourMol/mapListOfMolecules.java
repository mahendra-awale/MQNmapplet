/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package locateYourMol;

import MAPPLET.appletMain;
import MAPPLET.imageHandler;
import MAPPLET.logWindow;
import chemaxon.struc.Molecule;
import chemaxon.util.MolHandler;
import java.awt.Color;
import java.util.ArrayList;

/**
 *
 * @author mahendra
 */
public class mapListOfMolecules extends javax.swing.JDialog {

    appletMain ma;
    imageHandler ih;
    ArrayList<String> smiList = new ArrayList();
    public static String msg = "";

    /**
     * Creates new form mapListOfMolecules
     */
    public mapListOfMolecules(appletMain ma, imageHandler ih, ArrayList<String> smiL) {
        
        
        initComponents();
        this.setLocationRelativeTo(ma);
        this.ma = ma;
        this.ih = ih;
        smiList = smiL;
        this.getContentPane().setBackground(Color.ORANGE);
        this.setVisible(true);
        this.setTitle("PlEASE WAIT..MAPPING DATA");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jTextField1.setEditable(false);
        jTextField1.setText("Please wait..Locating Molecules on the Map...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed() {

        this.setModalityType(ModalityType.APPLICATION_MODAL);

        /*
         * update the log
         */
        logWindow.updateLog("Please Wait!!.\n");
        logWindow.updateLog("Locating Your Mol");
        logWindow.updateLog(".....");

        /*
         * do not allow user to do anything else
         */
        int numOfMolsMark = 0;

        for (int a = 0; a < smiList.size(); a++) {

            Molecule mol = null;
            try {
                mol = new MolHandler(smiList.get(a)).getMolecule();
            } catch (Exception ex) {
                logWindow.updateLog(smiList.get(a) + " Falied to Locate!\n");
                continue;
            }

            if (mol == null || mol.getAtomCount() > 50) {
                logWindow.updateLog(smiList.get(a) + " Falied to Locate (Exotic Molecule)!\n");
                continue;
            }

            mol.aromatize();
            String smi = mol.toFormat("smiles:u");
            String dbName = appletMain.dbName;
            String mapName = appletMain.mapName;

            smiTomapCoord mapMol = new smiTomapCoord(smi, dbName, mapName, appletMain.mapSize.x);
            try {
                int[] mapCoord = mapMol.getCoordForYourMol();
                ih.locateMolPixcel(mapCoord[0], mapCoord[1]);
                numOfMolsMark++;
            } catch (Exception ex) {
                logWindow.updateLog(smiList.get(a) + " Falied to Locate!\n");
            }
        }

        logWindow.updateLog(numOfMolsMark + " Molecules Located on the Map!\n");
        jTextField1.setText(numOfMolsMark + " Molecules Located on the Map!");
        msg = numOfMolsMark + " Molecules Located on the Map!";
        this.dispose();
    }
    /**
     * ***************************************************************************************
     */
}
